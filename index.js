const moment = require("moment");

moment.locale("ru");

const pg = require("pg");
const axios = require("axios");

const pool = new pg.Pool({
  user: "postgres",
  password: "",
  database: "valeriy",
  host: "127.0.0.1",
  port: 5432,
  max: 20,
});

const TelegramApi = require("node-telegram-bot-api");

const token = "";

const bot = new TelegramApi(token, {
  polling: true,
});

const tarifOptions = {
  reply_markup: JSON.stringify({
    inline_keyboard: [
      [
        {
          text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
          callback_data: "1",
        },
      ],
    ],
  }),
};
const peyOptions = (link) => {
  return {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: "–û–ø–ª–∞—Ç–∏—Ç—å",
            url: `${link}`,
          },
        ],
      ],
    }),
  };
};

const AutoPayOffOptions = {
  reply_markup: JSON.stringify({
    inline_keyboard: [
      [
        {
          text: "–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ",
          callback_data: "Off_autopay",
        },
      ],
    ],
  }),
};
const AutoPayOnOptions = {
  reply_markup: JSON.stringify({
    inline_keyboard: [
      [
        {
          text: "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ",
          callback_data: "On_autopay",
        },
      ],
    ],
  }),
};
const confirmOptions = {
  reply_markup: JSON.stringify({
    inline_keyboard: [
      [
        {
          text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
          callback_data: "confirm",
        },
        {
          text: "–û—Ç–º–µ–Ω–∏—Ç—å",
          callback_data: "mygatget",
        },
      ],
    ],
  }),
};

const settingofertaOptions = {
  reply_markup: JSON.stringify({
    inline_keyboard: [
      [
        {
          text: "–û—Ñ–µ—Ä—Ç–∞",
          url: "https://docs.google.com/document/d/1wxnnzeUrpUyhsKVZ5HG02y-e7a_KadmNaSDZrOujMDU/edit?usp=sharing",
        },
      ],
    ],
  }),
};
const mygadgetOptions = {
  reply_markup: JSON.stringify({
    inline_keyboard: [
      [
        {
          text: "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
          callback_data: "mygatget",
        },
      ],
    ],
  }),
};

bot.setMyCommands([
  {
    command: "/start",
    description: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
  },
  {
    command: "/buy",
    description: "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
  },
  {
    command: "/mygatget",
    description: "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
  },
  {
    command: "/support",
    description: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
  },
  {
    command: "/setting",
    description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è",
  },
  {
    command: "/oferta",
    description: "–û—Ñ–µ—Ä—Ç–∞",
  },
]);

const validateEmail = (email) => {
  return String(email)
    .toLowerCase()
    .match(
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    );
};

function rightEnd(number, mas) {
  if (number > 10 && [11, 12, 13, 14].includes(number % 100)) return "–¥–Ω–µ–π";
  last_num = number % 10;
  if (last_num == 1) return mas[0];
  if ([2, 3, 4].includes(last_num)) return mas[1];
  if ([5, 6, 7, 8, 9, 0].includes(last_num)) return mas[2];
}

bot.on("message", (msg) => {
  (async () => {
    const r = /\d+/;
    const text = msg.text;
    const chatId = msg.chat.id;
    const name = msg.chat.first_name;

    if (text === "/start") {
      await pool.query(
        `insert into users (telegram_id, name, tg_username) values ($1, $2, $3) ON CONFLICT (telegram_id) DO NOTHING;`,
        [msg.from.id, name, "@" + msg.from.username]
      );
      const user = (
        await pool.query(
          `SELECT first_enter, balance, id, first_marketing, id_user_invite, admission_ref FROM users WHERE telegram_id = $1`,
          [msg.from.id]
        )
      ).rows[0];
      if (user.first_enter == true) {
        const days_start = (
          await pool.query(
            ` SELECT t1.count as devices_count, CASE WHEN t1.count = 0 THEN 0 ELSE (balance / (t1.count * 5)) END AS days FROM users LEFT JOIN LATERAL (SELECT count(*) FROM devices WHERE devices.user_id = users.id AND is_active = true) as t1 on true WHERE users.telegram_id = $1; `,
            [msg.from.id]
          )
        ).rows[0].days;
        const how_gat = days_start.devices_count * 150;
        const howday = rightEnd(Math.floor(days_start), [
          "–¥–µ–Ω—å",
          "–¥–Ω—è",
          "–¥–Ω–µ–π",
        ]);
        await bot.sendMessage(chatId, `–†–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, ${name}`, {
          reply_markup: JSON.stringify({
            resize_keyboard: true,
            keyboard: [
              ["üì±–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞üíª", "üìÖ–ú–æ–π –±–∞–ª–∞–Ω—ÅüìÖ"],
              ["üíµ–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞üíµ"],
            ],
          }),
        });

        const gadget_how = rightEnd(days_start.devices_count, [
          "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
          "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
          "—É—Å—Ç—Ä–æ–π—Å—Ç–≤",
        ]);
        if (days_start.devices_count > 0) {
          await bot.sendMessage(
            chatId,
            `–í–∞—à –±–∞–ª–∞–Ω—Å ${Math.floor(user.balance)} ‚ÇΩ. (~${Math.floor(days_start)}${howday})\n\n–¢–∞—Ä–∏—Ñ ${how_gat} ‚ÇΩ/–º–µ—Å –∑–∞ ${days_start.devices_count} ${gadget_how}\n\n–ï—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Ö —Å–∫–∞—á–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞".\n\nüë≠ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ 30% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ `,
            tarifOptions
          );
        } else {
          await bot.sendMessage(
            chatId,
            `–í–∞—à –±–∞–ª–∞–Ω—Å ${Math.floor(user.balance)} ‚ÇΩ. (~${Math.floor(user.balance / 5)}${howday})\n\n–¢–∞—Ä–∏—Ñ 0 ‚ÇΩ/–º–µ—Å –∑–∞ 0 —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n\n–ï—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Ö —Å–∫–∞—á–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞".\n\nüë≠ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ 30% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ `,
            tarifOptions
          );
        }
      } else {
        await bot.sendMessage(7457390746, `–ó–∞—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,${name}`);

        if (!user.first_marketing) {
          await pool.query(
            `UPDATE users SET balance = 35, last_succes_daily = $2, first_marketing = $2, first_enter = $2 WHERE telegram_id = $1`,
            [chatId, true]
          );
          await bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`, {
            reply_markup: JSON.stringify({
              resize_keyboard: true,
              keyboard: [
                ["üì±–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞üíª", "üìÖ–ú–æ–π –±–∞–ª–∞–Ω—ÅüìÖ"],
                ["üíµ–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞üíµ"],
              ],
            }),
          });

          await bot.sendMessage(
            chatId,
            `–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 35 —Ä—É–±–ª–µ–π!\n\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ VPN –ë–ï–°–ü–õ–ê–¢–ù–û. –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –Ω–µ–¥–µ–ª—é. \n\nüöÄ–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—åüöÄ\n–†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ãüá∞üáøüá∑üá∫üá©üá™üáπüá∑üá≤üá®\n‚ôæ–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞‚ôæ\n\n‚¨áÔ∏è‚¨áÔ∏è–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É‚¨áÔ∏è‚¨áÔ∏è`,
            {
              reply_markup: JSON.stringify({
                inline_keyboard: [
                  [
                    {
                      text: "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                      callback_data: "mygatget",
                    },
                  ],
                ],
              }),
            }
          );
        }
        if (user.admission_ref == false && user.id_user_invite !== null) {
          await pool.query(
            `UPDATE users SET ref_balance = ref_balance + $1, balance = balance + $1, last_succes_daily = $3 WHERE id = $2`,
            [50, user.id_user_invite, true]
          );
          await pool.query(
            `UPDATE users SET balance = balance + $1, admission_ref = $3 WHERE telegram_id = $2`,
            [70, msg.from.id, true]
          );
          const telegram_ref_push = (
            await pool.query(`SELECT telegram_id FROM users WHERE id = $1`, [
              user.id_user_invite,
            ])
          ).rows[0].telegram_id;
          await bot.sendMessage(
            telegram_ref_push,
            `–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 50 —Ä—É–±–ª–µ–π.`
          );
        }
      }
    } else if (text === "/buy") {
      const id_start = (
        await pool.query(`SELECT id FROM users WHERE telegram_id = $1`, [
          msg.from.id,
        ])
      ).rows[0].id;
      const how_many = (
        await pool.query(
          `SELECT COUNT(*) FROM devices WHERE user_id = $1 and is_active = true`,
          [id_start]
        )
      ).rows[0].count;
      const how_gat = how_many * 150;
      const gadget_how = rightEnd(how_many, [
        "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        "—É—Å—Ç—Ä–æ–π—Å—Ç–≤",
      ]);
      const send_by_month = [];
      if (how_many > 0) {
        send_by_month.push(
          [
            {
              text: `150 —Ä—É–±–ª–µ–π(${Math.round((150 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "150",
            },
            {
              text: `300 —Ä—É–±–ª–µ–π(${Math.round((300 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "300",
            },
          ],
          [
            {
              text: `450 —Ä—É–±–ª–µ–π(${Math.round((450 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "450",
            },
            {
              text: `600 —Ä—É–±–ª–µ–π(${Math.round((600 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "600",
            },
          ],
          [
            {
              text: `1000 ‚ÇΩ(–±–æ–Ω—É—Å 500 ‚ÇΩ)(${Math.round((1500 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "1000",
            },
          ],
          [
            {
              text: `1500 ‚ÇΩ(–±–æ–Ω—É—Å 1000 ‚ÇΩ)(${Math.round((2550 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "1500",
            },
          ]
        );
      } else {
        send_by_month.push(
          [
            {
              text: `150 —Ä—É–±–ª–µ–π(1 –º–µ—Å)`,
              callback_data: "150",
            },
            {
              text: `300 —Ä—É–±–ª–µ–π(2 –º–µ—Å)`,
              callback_data: "300",
            },
          ],
          [
            {
              text: `450 —Ä—É–±–ª–µ–π(3 –º–µ—Å)`,
              callback_data: "450",
            },
            {
              text: `600 —Ä—É–±–ª–µ–π(4 –º–µ—Å)`,
              callback_data: "600",
            },
          ],
          [
            {
              text: `1000 ‚ÇΩ(–±–æ–Ω—É—Å 500 ‚ÇΩ)(10 –º–µ—Å)`,
              callback_data: "1000",
            },
          ],
          [
            {
              text: `1500 ‚ÇΩ(–±–æ–Ω—É—Å 1000 ‚ÇΩ)(16.7 –º–µ—Å)`,
              callback_data: "1500",
            },
          ]
        );
      }

      await bot.sendMessage(
        chatId,
        `–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n –¢–∞—Ä–∏—Ñ ${how_gat} ‚ÇΩ/–º–µ—Å –∑–∞ ${how_many} ${gadget_how}\n\n<b><i>–ó–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç 1000 —Ä—É–±–ª–µ–π, –∑–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤</i></b>`,
        {
          parse_mode: "HTML",
          reply_markup: JSON.stringify({
            inline_keyboard: [...send_by_month],
          }),
        }
      );
    } else if (text === "/setting") {
      const rec = (
        await pool.query(`SELECT reccurent FROM users WHERE telegram_id = $1`, [
          chatId,
        ])
      ).rows[0].reccurent;
      if (rec === true) {
        await bot.sendMessage(
          chatId,
          "–ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ",
          AutoPayOffOptions
        );
      } else {
        await bot.sendMessage(
          chatId,
          "–ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ: –û—Ç–∫–ª—é—á–µ–Ω–æ",
          AutoPayOnOptions
        );
      }
    } else if (text === "üíµ–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞üíµ") {
      const invite_id_bal = (
        await pool.query(
          `SELECT id, ref_balance FROM users WHERE telegram_id = $1`,
          [chatId]
        )
      ).rows[0];
      bot.sendMessage(
        chatId,
        `–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å 50 —Ä—É–±–ª–µ–π, –∞ –¥—Ä—É–≥—É 70 —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å\n\n–°–∫–æ–ª—å–∫–æ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: ${invite_id_bal.ref_balance} —Ä—É–±–ª–µ–π\n\n –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –Ω–∞ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: https://t.me/fast_unlimited_vpn_bot?start=ref_${invite_id_bal.id}`
      );
    } else if (text.startsWith("/start") && text.includes("partner")) {
      const pattern = /^\/start\s?partner_(\w+)$/;
      const matches = text.match(pattern);

      const partner = matches[1];

      await pool.query(
        `insert into users (telegram_id, name, name_partner, tg_username) values ($1, $2, $3, $4) ON CONFLICT (telegram_id) DO NOTHING;`,
        [msg.from.id, name, partner, "@" + msg.from.username]
      );
      const user = (
        await pool.query(
          `SELECT first_enter, balance, id FROM users WHERE telegram_id = $1`,
          [msg.from.id]
        )
      ).rows[0];
      if (user.first_enter == true) {
        const days_start = (
          await pool.query(
            `SELECT CASE WHEN t1.count = 0 THEN 0 ELSE (balance / (t1.count * 5)) END AS days FROM users LEFT JOIN LATERAL (SELECT count(*) FROM devices WHERE devices.user_id = users.id AND is_active = true) as t1 on true WHERE users.telegram_id = $1;`,
            [msg.from.id]
          )
        ).rows[0].days;
        const how_many = (
          await pool.query(
            `SELECT COUNT(*) FROM devices WHERE user_id = $1 and is_active = true`,
            [user.id]
          )
        ).rows[0].count;
        if (how_many > 0) {
          const howday = rightEnd(Math.floor(days_start), [
            "–¥–µ–Ω—å",
            "–¥–Ω—è",
            "–¥–Ω–µ–π",
          ]);
          await bot.sendMessage(chatId, `–†–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, ${name}`);
          await bot.sendMessage(
            chatId,
            `–í–∞—à –±–∞–ª–∞–Ω—Å ${Math.floor(user.balance)} —Ä—É–±–ª–µ–π (~${Math.floor(days_start)}${howday})\n–¢–∞—Ä–∏—Ñ 150—Ä/–º–µ—Å –∑–∞ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∞–∫—Ç–∏–≤–Ω–æ ${how_many} —É—Å—Ç—Ä–æ–π—Å—Ç–≤)\n\n–ï—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Ö —Å–∫–∞—á–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞".\n\nüë≠ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ 30% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ `,
            tarifOptions
          );
        } else {
          await bot.sendMessage(chatId, `–†–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, ${name}`);
          await bot.sendMessage(
            chatId,
            `–í–∞—à –±–∞–ª–∞–Ω—Å ${Math.floor(user.balance)} —Ä—É–±–ª–µ–π (~ 5 –¥–Ω–µ–π)\n–¢–∞—Ä–∏—Ñ 150—Ä/–º–µ—Å –∑–∞ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∞–∫—Ç–∏–≤–Ω–æ 0 —É—Å—Ç—Ä–æ–π—Å—Ç–≤)\n\n–ï—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Ö —Å–∫–∞—á–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞".\n\nüë≠ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ 30% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ `,
            tarifOptions
          );
        }
      } else {
        await bot.sendMessage(7457390746, `–ó–∞—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,${name}`);

        await bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${name}`, {
          reply_markup: JSON.stringify({
            resize_keyboard: true,
            keyboard: [
              ["üì±–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞üíª", "üìÖ–ú–æ–π –±–∞–ª–∞–Ω—ÅüìÖ"],
              ["üíµ–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞üíµ"],
            ],
          }),
        });

        await pool.query(
          `UPDATE users SET balance = 35, last_succes_daily = $2, first_marketing = $2, first_enter = $2 WHERE telegram_id = $1`,
          [chatId, true]
        );

        await bot.sendMessage(
          chatId,
          `–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 35 —Ä—É–±–ª–µ–π!\n\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ VPN –ë–ï–°–ü–õ–ê–¢–ù–û. –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –Ω–µ–¥–µ–ª—é. \n\nüöÄ–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—åüöÄ\n–†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ãüá∞üáøüá∑üá∫üá©üá™üáπüá∑üá≤üá®\n‚ôæ–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞‚ôæ\n\n‚¨áÔ∏è‚¨áÔ∏è–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É‚¨áÔ∏è‚¨áÔ∏è`,
          {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [
                  {
                    text: "üéâ–•–û–ß–£ –ë–ï–°–ü–õ–ê–¢–ù–ûüéâ",
                    callback_data: "confirm",
                  },
                ],
              ],
            }),
          }
        );
      }
    } else if (text === "üìÖ–ú–æ–π –±–∞–ª–∞–Ω—ÅüìÖ") {
      const rec = (
        await pool.query(
          `SELECT balance, t1.count as devices_count, CASE WHEN t1.count = 0 THEN 0 ELSE (balance / (t1.count * 5)) END AS days FROM users LEFT JOIN LATERAL (SELECT count(*) FROM devices WHERE devices.user_id = users.id AND is_active = true) as t1 on true WHERE users.telegram_id = $1;`,
          [chatId]
        )
      ).rows[0];
      if (rec.devices_count > 0) {
        const howday = rightEnd(Math.floor(rec.days), ["–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π"]);

        const how_date = new Date(Date.now() + rec.days * 24 * 3600 * 1000);
        const date_how = moment(how_date).format("D MMM YYYY");
        await bot.sendMessage(
          chatId,
          `–í–∞—à –±–∞–ª–∞–Ω—Å ${Math.floor(rec.balance)} —Ä—É–±–ª–µ–π (~${Math.floor(rec.days)} ${howday})\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${date_how}`,
          mygadgetOptions
        );
      } else {
        await bot.sendMessage(
          chatId,
          `–í–∞—à –±–∞–ª–∞–Ω—Å ${Math.floor(rec.balance)} —Ä—É–±–ª–µ–π. –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç –Ω–µ—Ç`,
          mygadgetOptions
        );
      }
    } else if (text.startsWith("/start") && text.match(r)) {
      const id_user_invite = text.replace(/\D/g, "");
      await pool.query(
        `INSERT INTO users (telegram_id, name, tg_username, id_user_invite) VALUES ($1, $2, $3, $4) ON CONFLICT (telegram_id) DO NOTHING;`,
        [msg.from.id, name, "@" + msg.from.username, id_user_invite]
      );
      const user = (
        await pool.query(
          `SELECT first_enter, id, balance, admission_ref FROM users WHERE telegram_id = $1`,
          [msg.from.id]
        )
      ).rows[0];
      if (user.first_enter == true) {
        const days_dev = (
          await pool.query(
            ` SELECT t1.count as devices_count, CASE WHEN t1.count = 0 THEN 0 ELSE (balance / (t1.count * 5)) END AS days FROM users LEFT JOIN LATERAL (SELECT count(*) FROM devices WHERE devices.user_id = users.id AND is_active = true) as t1 on true WHERE users.telegram_id = $1; `,
            [msg.from.id]
          )
        ).rows[0];
        const days_start = days_dev.days;
        if (days_dev.devices_count > 0) {
          const howday = rightEnd(Math.floor(days_start), [
            "–¥–µ–Ω—å",
            "–¥–Ω—è",
            "–¥–Ω–µ–π",
          ]);
          const how_gat = days_dev.devices_count * 150;
          await bot.sendMessage(chatId, `–†–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, ${name}`);
          const gadget_how = rightEnd(days_dev.devices_count, [
            "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
            "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
            "—É—Å—Ç—Ä–æ–π—Å—Ç–≤",
          ]);

          await bot.sendMessage(
            chatId,
            `–í–∞—à –±–∞–ª–∞–Ω—Å ${Math.floor(user.balance)} ‚ÇΩ. (~${Math.floor(days_start)}${howday})\n\n–¢–∞—Ä–∏—Ñ ${how_gat} ‚ÇΩ/–º–µ—Å –∑–∞ ${days_dev.devices_count} ${gadget_how}\n\n–ï—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Ö —Å–∫–∞—á–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞".\n\nüë≠ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ 30% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ `,
            tarifOptions
          );
        } else {
          await bot.sendMessage(chatId, `–†–∞–¥—ã –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, ${name}`);
          await bot.sendMessage(
            chatId,
            `–í–∞—à –±–∞–ª–∞–Ω—Å ${Math.floor(user.balance)} —Ä—É–±–ª–µ–π (~ 5 –¥–Ω–µ–π)\n–¢–∞—Ä–∏—Ñ 150—Ä/–º–µ—Å –∑–∞ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∞–∫—Ç–∏–≤–Ω–æ 0 —É—Å—Ç—Ä–æ–π—Å—Ç–≤)\n\n–ï—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Ö —Å–∫–∞—á–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞".\n\nüë≠ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ 30% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ `,
            tarifOptions
          );
        }
      } else {
        await bot.sendMessage(7457390746, `–ó–∞—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,${name}`);
        await pool.query(
          `UPDATE users SET balance = $1, last_succes_daily = $2, first_marketing = $2, first_enter = $2 WHERE telegram_id = $3`,
          [35, true, chatId]
        );
        await bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`, {
          reply_markup: JSON.stringify({
            resize_keyboard: true,
            keyboard: [
              ["üì±–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞üíª", "üìÖ–ú–æ–π –±–∞–ª–∞–Ω—ÅüìÖ"],
              ["üíµ–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞üíµ"],
            ],
          }),
        });

        await bot.sendMessage(
          chatId,
          `–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ 105 —Ä—É–±–ª–µ–π!\n\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ VPN –ë–ï–°–ü–õ–ê–¢–ù–û. –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –Ω–µ–¥–µ–ª—é. \n\nüöÄ–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—åüöÄ\n–†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ãüá∞üáøüá∑üá∫üá©üá™üáπüá∑üá≤üá®\n‚ôæ–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞‚ôæ\n\n‚¨áÔ∏è‚¨áÔ∏è–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É‚¨áÔ∏è‚¨áÔ∏è`,
          {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [
                  {
                    text: "üéâ–•–û–ß–£ –ë–ï–°–ü–õ–ê–¢–ù–ûüéâ",
                    callback_data: "confirm",
                  },
                ],
              ],
            }),
          }
        );
      }
      if (user.admission_ref == false && id_user_invite !== null) {
        await pool.query(
          `UPDATE users SET ref_balance = ref_balance + $1, balance = balance + $1, last_succes_daily = $2 WHERE id = $3`,
          [50, true, id_user_invite]
        );
        await pool.query(
          `UPDATE users SET balance = balance + $1, admission_ref = $2 WHERE telegram_id = $3`,
          [70, true, msg.from.id]
        );
        const telegram_ref_push = (
          await pool.query(`SELECT telegram_id FROM users WHERE id = $1`, [
            id_user_invite,
          ])
        ).rows[0].telegram_id;
        await bot.sendMessage(
          telegram_ref_push,
          `–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 50 —Ä—É–±–ª–µ–π.`
        );
      }
    } else if (text === "üì±–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞üíª" || text === "/mygatget") {
      const add_id = (
        await pool.query(`SELECT id FROM users WHERE telegram_id = $1`, [
          chatId,
        ])
      ).rows[0].id;
      const gadgets = (
        await pool.query(
          `SELECT id, name, is_active FROM devices WHERE user_id = $1 order by id`,
          [add_id]
        )
      ).rows;
      const send_devices = [];
      for (const gadget of gadgets) {
        if (gadget.is_active == true) {
          send_devices.push([
            {
              text: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${gadget.name}`,
              callback_data: `gadget_${gadget.id}`,
            },
          ]);
        }
      }
      await bot.sendMessage(chatId, `–í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞`, {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            ...send_devices,
            [
              {
                text: "–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                callback_data: "Add",
              },
              {
                text: "–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                callback_data: "Delete",
              },
            ],
          ],
        }),
      });
    } else if (text === "/support") {
      await bot.sendMessage(
        chatId,
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: @VPN_Support_SF"
      );
    } else if (text === "/oferta") {
      await bot.sendMessage(
        chatId,
        `–ò–ü –ï—Ä–µ–º–∏–Ω –í.–í. –ò–ù–ù 622908770712 –û—Ñ–µ—Ä—Ç–∞:`,
        settingofertaOptions
      );
    } else if (msg.text) {
      if (GET_STORE_PARAM(chatId, "step") === "email") {
        if (validateEmail(msg.text)) {
          await pool.query(
            `UPDATE users SET email = $1 WHERE telegram_id = $2`,
            [msg.text.toLowerCase().trim(), chatId]
          );
          if (
            GET_STORE_PARAM(chatId, "pay_button") === "150" ||
            GET_STORE_PARAM(chatId, "pay_button") === "300" ||
            GET_STORE_PARAM(chatId, "pay_button") === "450" ||
            GET_STORE_PARAM(chatId, "pay_button") === "600" ||
            GET_STORE_PARAM(chatId, "pay_button") === "1000" ||
            GET_STORE_PARAM(chatId, "pay_button") === "1500"
          ) {
            const link = await createPaymentUrl(
              msg.text.toLowerCase().trim(),
              +GET_STORE_PARAM(chatId, "pay_button"),
              chatId
            );
            await bot.sendMessage(
              chatId,
              `–î–µ–ø–æ–∑–∏—Ç ${GET_STORE_PARAM(chatId, "pay_button")} —Ä—É–±–ª–µ–π\n\n–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π? @VPN_Support_SF\r\n\r\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`,
              peyOptions(link)
            );
          }
        } else {
          await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
        }
      }
    }
  })().catch((e) => {
    console.log(e);

    bot.sendMessage(msg.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å");
  });
});

const STORE = {};
const ADD_STORE_PARAM = (chatId, key, value) => {
  if (!STORE[chatId]) STORE[chatId] = {};
  STORE[chatId][key] = value;
};

const GET_STORE_PARAM = (chatId, key) => {
  if (!STORE[chatId]) return undefined;
  return STORE[chatId][key];
};

const createPaymentUrl = async (email, value, chatId, is_trial) => {
  const data = await axios.post(
    "https://api.yookassa.ru/v3/payments",
    {
      amount: {
        value: value,
        currency: "RUB",
      },
      payment_method_data: {
        type: "bank_card",
      },
      confirmation: {
        type: "redirect",
        return_url: "https://www.example.com/return_url",
      },
      description: "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
      capture: is_trial ? false : true,
      save_payment_method: true,
      receipt: {
        tax_system_code: 3,
        customer: {
          email: email,
        },
        items: [
          {
            description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
            amount: {
              value: value,
              currency: "RUB",
            },
            vat_code: 1,
            quantity: 1,
            payment_subject: "service",
            payment_mode: "full_payment",
          },
        ],
      },
    },
    {}
  );
  const payid = data.data.id;
  const user_id = (
    await pool.query(`SELECT id FROM users WHERE telegram_id = $1`, [chatId])
  ).rows[0].id;
  await pool.query(
    `INSERT into payment (user_id, id_billing, amount) values($1, $2, $3)`,
    [user_id, payid, data.data.amount.value]
  );
  await bot.sendMessage(
    7457390746,
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –Ω–∞ ${data.data.amount.value}`
  );
  return data.data.confirmation.confirmation_url;
};

function generateUUID() {
  var d = new Date().getTime();
  var d2 =
    (typeof performance !== "undefined" &&
      performance.now &&
      performance.now() * 1000) ||
    0;
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    var r = Math.random() * 16;
    if (d > 0) {
      r = (d + r) % 16 | 0;
      d = Math.floor(d / 16);
    } else {
      r = (d2 + r) % 16 | 0;
      d2 = Math.floor(d2 / 16);
    }
    return (c === "x" ? r : (r & 0x3) | 0x8).toString(16);
  });
}

bot.on("callback_query", (cb) => {
  (async () => {
    await bot.answerCallbackQuery(cb.id);
    const chatId = cb.from.id;
    const uuid = generateUUID();
    if (cb.data === "1") {
      const id_start = (
        await pool.query(`SELECT id FROM users WHERE telegram_id = $1`, [
          chatId,
        ])
      ).rows[0].id;
      const how_many = (
        await pool.query(
          `SELECT COUNT(*) FROM devices WHERE user_id = $1 and is_active = true`,
          [id_start]
        )
      ).rows[0].count;
      const how_gat = how_many * 150;
      const gadget_how = rightEnd(Math.floor(how_many), [
        "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        "—É—Å—Ç—Ä–æ–π—Å—Ç–≤",
      ]);
      const send_by_month = [];
      if (how_many > 0) {
        send_by_month.push(
          [
            {
              text: `150 —Ä—É–±–ª–µ–π(${Math.round((150 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "150",
            },
            {
              text: `300 —Ä—É–±–ª–µ–π(${Math.round((300 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "300",
            },
          ],
          [
            {
              text: `450 —Ä—É–±–ª–µ–π(${Math.round((450 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "450",
            },
            {
              text: `600 —Ä—É–±–ª–µ–π(${Math.round((600 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "600",
            },
          ],
          [
            {
              text: `1000 ‚ÇΩ(–±–æ–Ω—É—Å 500 ‚ÇΩ)(${Math.round((1500 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "1000",
            },
          ],
          [
            {
              text: `1500 ‚ÇΩ(–±–æ–Ω—É—Å 1050 ‚ÇΩ)(${Math.round((2500 / (how_many * 150)) * 10) / 10}–º–µ—Å)`,
              callback_data: "1500",
            },
          ]
        );
      } else {
        send_by_month.push(
          [
            {
              text: `150 —Ä—É–±–ª–µ–π(1 –º–µ—Å)`,
              callback_data: "150",
            },
            {
              text: `300 —Ä—É–±–ª–µ–π(2 –º–µ—Å)`,
              callback_data: "300",
            },
          ],
          [
            {
              text: `450 —Ä—É–±–ª–µ–π(3 –º–µ—Å)`,
              callback_data: "450",
            },
            {
              text: `600 —Ä—É–±–ª–µ–π(4 –º–µ—Å)`,
              callback_data: "600",
            },
          ],
          [
            {
              text: `1000 ‚ÇΩ(–±–æ–Ω—É—Å 500 ‚ÇΩ)(10 –º–µ—Å)`,
              callback_data: "1000",
            },
          ],
          [
            {
              text: `1500 ‚ÇΩ(–±–æ–Ω—É—Å 1000 ‚ÇΩ)(16.7 –º–µ—Å)`,
              callback_data: "1500",
            },
          ]
        );
      }
      await bot.sendMessage(
        chatId,
        `–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n –¢–∞—Ä–∏—Ñ ${how_gat} ‚ÇΩ/–º–µ—Å –∑–∞ ${how_many} ${gadget_how}\n\n<b><i>–ó–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç 1000 —Ä—É–±–ª–µ–π, –∑–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤</i></b>`,
        {
          parse_mode: "HTML",
          reply_markup: JSON.stringify({
            inline_keyboard: [...send_by_month],
          }),
        }
      );
    } else if (
      cb.data === "150" ||
      cb.data === "300" ||
      cb.data === "450" ||
      cb.data === "600" ||
      cb.data === "1000" ||
      cb.data === "1500"
    ) {
      const email = (
        await pool.query(`SELECT email FROM users WHERE telegram_id = $1`, [
          chatId,
        ])
      ).rows[0].email;
      const amount = +cb.data;

      if (email === null) {
        ADD_STORE_PARAM(chatId, "step", "email");
        ADD_STORE_PARAM(chatId, "pay_button", cb.data);

        await bot.sendMessage(chatId, `–í–≤–µ–¥–∏ email –¥–ª—è –æ–ø–ª–∞—Ç—ã:`);
      } else {
        const link = await createPaymentUrl(email, +cb.data, chatId);
        await bot.sendMessage(
          chatId,
          `–î–µ–ø–æ–∑–∏—Ç ${amount} —Ä—É–±–ª–µ–π\n\n–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π? @VPN_Support_SF\r\n\r\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`,
          peyOptions(link)
        );
      }
    }
    if (cb.data === "Off_autopay") {
      pool.query(
        `UPDATE users SET reccurent = 'false' WHERE telegram_id = $1`,
        [chatId]
      ).reccurent;
      bot.sendMessage(chatId, "–ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
    }

    if (cb.data === "On_autopay") {
      pool.query(`UPDATE users SET reccurent = 'true' WHERE telegram_id = $1`, [
        chatId,
      ]).reccurent;
      bot.sendMessage(chatId, "–ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ");
    }
    if (cb.data === "Add") {
      await bot.sendMessage(
        chatId,
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n\n–ó–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç–∞ 150 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü",
        confirmOptions
      );
    }
    if (cb.data === "confirm") {
      const add_id_bal = (
        await pool.query(
          `SELECT id, balance FROM users WHERE telegram_id = $1`,
          [chatId]
        )
      ).rows[0];
      const how_many = (
        await pool.query(
          `SELECT COUNT(*) FROM devices WHERE user_id = $1 and is_active = true`,
          [add_id_bal.id]
        )
      ).rows[0].count;
      if (add_id_bal.balance > 0) {
        if (how_many >= 5) {
          await bot.sendMessage(
            chatId,
            "–î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
          );
        } else {
          let vpn_key_id = Math.random().toString(32).slice(2);

          const randomcountry = (
            await pool.query(
              `select id, description from countries order by random() limit 1`
            )
          ).rows[0];

          await pool.query(
            `INSERT INTO devices (user_id, created_at, vpn_key, country_id, uuid) values ($1, $2, $3, $4, $5)`,
            [
              add_id_bal.id,
              new Date().toISOString(),
              vpn_key_id,
              randomcountry.id,
              uuid,
            ]
          );
          const vpn_id = (
            await pool.query(`SELECT id FROM devices WHERE vpn_key = $1`, [
              vpn_key_id,
            ])
          ).rows[0].id;
          const VPNOptions = {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [
                  {
                    text: "ü§ñAndroidü§ñ",
                    callback_data: `VPN${vpn_id}Android`,
                  },
                  {
                    text: "üçéIOSüçé",
                    callback_data: `VPN${vpn_id}Apple`,
                  },
                ],
                [
                  {
                    text: "ü™üWindowsü™ü",
                    callback_data: `VPN${vpn_id}Windows`,
                  },
                  {
                    text: "üçèMacOSüçè",
                    callback_data: `VPN${vpn_id}MacOS`,
                  },
                ],
              ],
            }),
          };
          await bot.sendMessage(
            chatId,
            "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É",
            VPNOptions
          );

          await bot.sendMessage(
            7457390746,
            `–ß–µ–ª ID: ${add_id_bal.id} –¥–æ–±–∞–≤–∏–ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ`
          );
        }
      } else {
        await bot.sendMessage(
          chatId,
          "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –ü–æ–ø–æ–ª–Ω–∏—Ç—å /buy"
        );
      }
    }
    if (cb.data === "mygatget") {
      const add_id = (
        await pool.query(`SELECT id FROM users WHERE telegram_id = $1`, [
          chatId,
        ])
      ).rows[0].id;
      const gadgets = (
        await pool.query(
          `SELECT id, name, is_active FROM devices WHERE user_id = $1`,
          [add_id]
        )
      ).rows;
      const send_devices = [];

      for (const gadget of gadgets) {
        if (gadget.is_active == true) {
          send_devices.push([
            {
              text: `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${gadget.name}`,
              callback_data: `gadget_${gadget.id}`,
            },
          ]);
        }
      }
      await bot.sendMessage(chatId, `–í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞`, {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            ...send_devices,
            [
              {
                text: "–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                callback_data: "Add",
              },
              {
                text: "–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                callback_data: "Delete",
              },
            ],
          ],
        }),
      });
    }
    if (cb.data === "Delete") {
      const add_id = (
        await pool.query(`SELECT id FROM users WHERE telegram_id = $1`, [
          chatId,
        ])
      ).rows[0].id;
      const gadgets = (
        await pool.query(
          `SELECT id, name, is_active FROM devices WHERE user_id = $1`,
          [add_id]
        )
      ).rows;
      const send_devices = [];
      for (const gadget of gadgets) {
        if (gadget.is_active == true) {
          send_devices.push([
            {
              text: `–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${gadget.name}?`,
              callback_data: `deletegadget_${gadget.id}`,
            },
          ]);
        }
      }

      const deleteOptions = {
        reply_markup: JSON.stringify({
          inline_keyboard: send_devices,
        }),
      };

      await bot.sendMessage(chatId, `–í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞`, deleteOptions);
    }
    if (cb.data.startsWith("gadget_")) {
      const id_device = cb.data.replace(/\D/g, "");
      const country_id = (
        await pool.query(`SELECT country_id FROM devices WHERE id = $1`, [
          id_device,
        ])
      ).rows[0].country_id;
      const name_country = (
        await pool.query(`SELECT description FROM countries WHERE id = $1`, [
          country_id,
        ])
      ).rows[0].description;

      const PNOptions = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [
              {
                text: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É",
                callback_data: `changecountry${id_device}`,
              },
            ],
            [
              {
                text: "ü§ñAndroidü§ñ",
                callback_data: `VPN${id_device}Android`,
              },
              {
                text: "üçéIOSüçé",
                callback_data: `VPN${id_device}Apple`,
              },
            ],
            [
              {
                text: "ü™üWindowsü™ü",
                callback_data: `VPN${id_device}Windows`,
              },
              {
                text: "üçèMacOSüçè",
                callback_data: `VPN${id_device}MacOS`,
              },
            ],
          ],
        }),
      };
      await bot.sendMessage(
        chatId,
        `–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å—Ç—Ä–∞–Ω–µ: ${name_country}\n\n–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @VPN_Support_SF\n\n–ù—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ?`,
        PNOptions
      );
    }
    if (cb.data.startsWith("changecountry")) {
      const country_device = cb.data.replace(/\D/g, "");
      const countries = (
        await pool.query(`SELECT id, description FROM countries`)
      ).rows;
      const change_countries = [];
      for (const country of countries) {
        change_countries.push([
          {
            text: `${country.description}`,
            callback_data: `change-country-${country_device}-${country.id}`,
          },
        ]);
      }
      const CountryOptions = {
        reply_markup: JSON.stringify({
          inline_keyboard: change_countries,
        }),
      };
      await bot.sendMessage(
        chatId,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã, —Å—Ç—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç",
        CountryOptions
      );
    }
    if (cb.data.startsWith(`change-country-`)) {
      const iddel_device = cb.data.match(/change\-country\-(\d+)\-(\d+)/);

      const client = await pool.connect();

      try {
        await client.query("BEGIN");

        await client.query(`SELECT id FROM devices WHERE id = $1 FOR UPDATE;`, [
          iddel_device[1],
        ]);

        const currentCountry = (
          await client.query(`SELECT country_id FROM devices WHERE id = $1`, [
            iddel_device[1],
          ])
        ).rows[0].country_id;

        if (+currentCountry !== +iddel_device[2]) {
          await client.query(
            `UPDATE devices SET country_id = $1 WHERE id = $2`,
            [iddel_device[2], iddel_device[1]]
          );
          await client.query(
            `UPDATE devices_servers SET need_delete = now() WHERE device_id = $1`,
            [iddel_device[1]]
          );
        }

        await client.query("COMMIT");

        const country_name = (
          await pool.query(`SELECT description FROM countries WHERE id = $1`, [
            iddel_device[2],
          ])
        ).rows[0].description;

        await bot.sendMessage(chatId, `–°—Ç—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${country_name}`);
      } catch (e) {
        await client.query("ROLLBACK");
        throw e;
      } finally {
        client.release();
      }
    }

    if (cb.data.startsWith("deletegadget_")) {
      const iddel_device = cb.data.replace(/\D/g, "");
      const name_dev = (
        await pool.query(`SELECT name from devices WHERE id = $1`, [
          iddel_device,
        ])
      ).rows[0].name;
      const deleteOptions = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [
              {
                text: "–£–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                callback_data: `delgad${iddel_device}`,
              },
              {
                text: "–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
                callback_data: "mygatget",
              },
            ],
          ],
        }),
      };
      await bot.sendMessage(
        chatId,
        `–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${name_dev}?`,
        deleteOptions
      );
    }
    if (cb.data.startsWith("delgad")) {
      const iddelete_device = cb.data.replace(/\D/g, "");
      const create_at_day = (
        await pool.query(`SELECT created_at FROM devices WHERE id = $1`, [
          iddelete_device,
        ])
      ).rows[0].created_at;
      if (create_at_day < Date.now() - 1 * 24 * 3600 * 1000) {
        await pool.query(`update devices set is_active = false where id = $1`, [
          iddelete_device,
        ]);
        await bot.sendMessage(chatId, `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ`);
      } else {
        await bot.sendMessage(
          chatId,
          "–° –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤, —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
        );
      }
    }
    if (
      (cb.data.startsWith("VPN") && cb.data.endsWith("Android")) ||
      (cb.data.startsWith("VPN") && cb.data.endsWith("Apple")) ||
      (cb.data.startsWith("VPN") && cb.data.endsWith("Windows")) ||
      (cb.data.startsWith("VPN") && cb.data.endsWith("MacOS"))
    ) {
      const iddel_devicevpn = cb.data.replace(/\D/g, "");
      const vpn_connect = (
        await pool.query(
          `SELECT vpn_key, uuid, flow FROM devices WHERE id = $1`,
          [iddel_devicevpn]
        )
      ).rows[0];
      if (cb.data.endsWith("Android")) {
        await pool.query(
          `UPDATE devices SET name = 'Apple IOS' WHERE vpn_key = $1`,
          [vpn_connect.vpn_key]
        );
        await bot.sendMessage(
          chatId,
          `1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href="https://play.google.com/store/apps/details?id=com.v2raytun.android&hl=uk&gl=US">V2RayTune –∏–∑ GooglePlay</a>\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —Å–Ω–∏–∑—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayTune: –Ω–∞–∂–º–∏—Ç–µ ‚ûï –≤–≤–µ—Ä—Ö—É, –∏ –∑–∞—Ç–µ–º –î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞. \n4. –ì–æ—Ç–æ–≤–æ! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`,
          {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          }
        );
      } else if (cb.data.endsWith("Apple")) {
        await pool.query(
          `UPDATE devices SET name = 'Apple IOS' WHERE vpn_key = $1`,
          [vpn_connect.vpn_key]
        );
        await bot.sendMessage(
          chatId,
          `1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href="https://apps.apple.com/ru/app/v2raytun/id6476628951">V2RayTune –∏–∑ AppStore</a>\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç-—Å—Å—ã–ª–∫—É —Å–Ω–∏–∑—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayTune: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ûï, –∏ –∑–∞—Ç–µ–º –î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞. \n4. –ì–æ—Ç–æ–≤–æ! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –Ω–∞–∂–º–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –ø–ª–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`,
          {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          }
        );
      } else if (cb.data.endsWith("Windows")) {
        await pool.query(
          `UPDATE devices SET name = 'Windows' WHERE vpn_key = $1`,
          [vpn_connect.vpn_key]
        );
        await bot.sendMessage(
          chatId,
          `1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href="https://www.microsoft.com/store/productId/9PDFNL3QV2S5?ocid=pdpshare">Hiddify –∏–∑ MicrosortStore</a>\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —Å–Ω–∏–∑—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hiddify: –Ω–∞–∂–º–∏—Ç–µ "–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", –∑–∞—Ç–µ–º "–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞". \n3. –ì–æ—Ç–æ–≤–æ! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª–æ–≥–æ—Ç–∏–ø –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏`,
          {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          }
        );
      } else if (cb.data.endsWith("MacOS")) {
        await pool.query(
          `UPDATE devices SET name = 'Apple MacOS' WHERE vpn_key = $1`,
          [vpn_connect.vpn_key]
        );
        await bot.sendMessage(
          chatId,
          `1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href="https://apps.apple.com/ru/app/v2raytun/id6476628951">V2RayTune –∏–∑ AppStore</a>\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —Å–Ω–∏–∑—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayTune: –Ω–∞–∂–º–∏—Ç–µ ‚ûï –≤–≤–µ—Ä—Ö—É, –∏ –∑–∞—Ç–µ–º –î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞. \n3. –ì–æ—Ç–æ–≤–æ! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`,
          {
            parse_mode: "HTML",
            disable_web_page_preview: true,
          }
        );
      }
      if (vpn_connect.flow == false) {
        await bot.sendMessage(
          chatId,
          `<code>vless://${vpn_connect.uuid}@${vpn_connect.vpn_key}.secure-fast.pro:443?type=tcp&security=reality&pbk=SkALkcGApM-rT9deLcrchgUaxUDQfwfLwgLyd687bn8&fp=random&sni=google.com&sid=23cd&spx=%2F#valera-vpn</code>`,
          {
            parse_mode: "HTML",
          }
        );
      } else {
        await bot.sendMessage(
          chatId,
          `<code>vless://${vpn_connect.uuid}@${vpn_connect.vpn_key}.secure-fast.pro:443?type=tcp&security=reality&pbk=SkALkcGApM-rT9deLcrchgUaxUDQfwfLwgLyd687bn8&fp=chrome&sni=google.com&sid=23cd&spx=%2F&flow=xtls-rprx-vision#valera-vpn</code>`,
          {
            parse_mode: "HTML",
          }
        );
      }
    }
    if (cb.data == "connectVPN") {
      const email = (
        await pool.query(`SELECT email FROM users WHERE telegram_id = $1`, [
          chatId,
        ])
      ).rows[0].email;

      if (email === null) {
        ADD_STORE_PARAM(chatId, "step", "email");
        await bot.sendMessage(
          chatId,
          `–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:`
        );
        ADD_STORE_PARAM(chatId, "pay_button", 1);
      } else {
        const link = await createPaymentUrl(email, 1, chatId);
        await bot.sendMessage(
          chatId,
          `–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é –∑–∞ 1 —Ä—É–±–ª—å\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`,
          peyOptions(link)
        );
      }
    }
  })().catch((e) => {
    console.log(e);

    bot.sendMessage(cb.from.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
  });
});
